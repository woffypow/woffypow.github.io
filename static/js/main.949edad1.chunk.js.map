{"version":3,"sources":["components/Item/index.js","App.js","index.js"],"names":["formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","Item","timer","props","coin","price","total","name","isBold","TP","TPwtBTC","useState","currentTotal","setCurrentTotal","className","setClassName","useEffect","setTimeout","format","color","toFixed","pairs","btc_idr","asset","xrp_idr","theta_idr","tfuel_idr","ada_idr","bnb_idr","modal","App","grandTotal","setTotal","summary","setSummary","precent","setPercent","BTCTotal","setBTCTotal","clearInterval","fetchData","a","fetch","cache","res","json","data","tickers","summaryData","keys","Object","i","length","key","last","v","Number","growthPercent","document","title","console","log","isLoss","gain","map","padding","width","maxWidth","height","chartType","loader","rootProps","imageUrls","numCols","containerWidth","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.949edad1.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.scss';\n\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n\n  // These options are needed to round to whole numbers if that's what you want.\n  minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  maximumFractionDigits: 0 // (causes 2500.99 to be printed as $2,501)\n});\n\nfunction Item(props) {\n  const { coin, price, total, name, isBold, TP, TPwtBTC } = props;\n\n  const [currentTotal, setCurrentTotal] = useState(total);\n  const [className, setClassName] = useState('');\n\n  useEffect(() => {\n    if (total < currentTotal) {\n      setClassName('loss');\n    } else if (total === currentTotal) {\n      setClassName('');\n    } else {\n      setClassName('gain');\n    }\n\n    setTimeout(() => {\n      setClassName('');\n    }, 1000);\n\n    setCurrentTotal(total);\n  }, [total]);\n\n  return (\n    <tr className={className}>\n      <td>\n        {coin} {name}\n      </td>\n      <td>{price > 0 ? formatter.format(price) : price}</td>\n      <td className={isBold ? 'bold' : ''}>{formatter.format(total)}</td>\n      <td style={{ color: '#155724' }}>\n        { price > 0 && name === 'BTC' && `${(coin * TP / 100).toFixed(8)} BTC` }\n        { price > 0 && name !== 'BTC' &&  `${(coin * TP / 100).toFixed(4)} ${name} | ${(coin * TPwtBTC / 100).toFixed(4)} ${name}` }\n      </td>\n    </tr>\n  );\n}\n\nexport default Item;\n","import React, { useEffect, useState } from 'react';\nimport ImageMasonry from 'react-image-masonry';\nimport { Chart } from 'react-google-charts';\nimport Item from './components/Item';\nimport './style.css';\n\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n  minimumFractionDigits: 0,\n  maximumFractionDigits: 0\n});\n\nconst pairs = {\n  btc_idr: {\n    asset: 0,\n    name: 'BTC',\n    color: '#EBAC1C'\n  },\n  xrp_idr: {\n    asset: 0,\n    name: 'XRP',\n    color: '#5CACDD'\n  },\n  theta_idr: {\n    asset: 0,\n    name: 'THETA',\n    color: '#5C50DD'\n  },\n  tfuel_idr: {\n    asset: 0,\n    name: 'TFUEL',\n    color: '#CFE542'\n  },\n  ada_idr: {\n    asset: 30.485592,\n    name: 'ADA',\n    color: '#1365EA'\n  },\n  bnb_idr: {\n    asset: 0,\n    name: 'BNB',\n    color: '#FC5731'\n  }\n};\n\nconst modal = 1000000 ;\n\nlet timer;\n\nexport default function App() {\n  const [grandTotal, setTotal] = useState(0);\n  const [summary, setSummary] = useState({});\n  const [precent, setPercent] = useState(0);\n  const [BTCTotal, setBTCTotal] = useState(0);\n\n  useEffect(() => {\n    clearInterval(timer);\n    const fetchData = async () => {\n      try {\n        const res = await fetch(`https://indodax.com/api/summaries`, {\n          cache: 'no-cache'\n        });\n        const data = await res.json();\n\n        const { tickers } = data;\n        let total = 0;\n\n        const summaryData = {};\n\n        let keys = Object.keys(pairs);\n        for (let i = 0; i < keys.length; i++) {\n          let key = keys[i];\n          const coin = pairs[key].asset;\n          const name = pairs[key].name;\n          const color = pairs[key].color;\n          const { last: price } = tickers[key];\n          const v = coin * Number(price);\n          \n          if(name === 'BTC') {\n            setBTCTotal(v);\n          }\n          \n          summaryData[key] = {\n            color,\n            name,\n            coin,\n            price: price,\n            total: v\n          };\n          total += v;\n        }\n\n        const growthPercent = ((total - modal) / (modal / 100)).toFixed(1);\n\n        setTotal(total);\n        setSummary(summaryData);\n        setPercent(growthPercent);\n        document.title = `My Gain:  ${formatter.format(\n          total - modal\n        )} (${growthPercent}%)`;\n\n        timer = setTimeout(() => {\n          fetchData();\n        }, 3000);\n      } catch (e) {\n        console.log('error', e);\n        fetchData();\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  const isLoss = grandTotal < modal;\n  const gain = grandTotal - modal;\n  \n  const TP = (gain / (grandTotal / 100)).toFixed(1);\n  const TPwtBTC = (gain / ((grandTotal - BTCTotal) / 100)).toFixed(1);\n\n  return (\n    <div>\n      <div className=\"table-responsive table-striped\">\n        <table className=\"table\">\n          <thead className=\"thead-dark\">\n            <tr>\n              <th>Asset</th>\n              <th>Price</th>\n              <th>Total</th>\n              <th>TP</th>\n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(summary).map(key => {\n              const { coin, price, total, name } = summary[key];\n              return (\n                <Item\n                  key={key}\n                  coin={coin}\n                  price={price}\n                  name={name}\n                  total={total}\n                  isLoss={isLoss}\n                  TPwtBTC={TPwtBTC}\n                  TP={TP}\n                />\n              );\n            })}\n            <Item price=\"Total:\" total={grandTotal} isBold />\n          </tbody>\n        </table>\n      </div>\n      <div style={{ padding: 20 }}>\n        {grandTotal > 0 && (\n          <div className={`alert ${isLoss ? 'alert-danger' : 'alert-success'}`}>\n            Gain{' '}\n            <strong>\n              {formatter.format(gain)} ({precent}%)\n            </strong>\n\n            { !isLoss && ` | TP ${TP}% \n            or ${TPwtBTC}% ALTs` }\n          </div>\n        )}\n      </div>\n      <div style={{ width: 500, maxWidth: '100%' }}>\n        <Chart\n          width={'100%'}\n          height={'300px'}\n          chartType=\"PieChart\"\n          loader={<div>Loading Chart</div>}\n          data={[\n            ['Asset', 'Value'],\n            ...Object.keys(summary).map(key => {\n              const { coin, price, total, name, color } = summary[key];\n              return [name, total];\n            })\n          ]}\n          rootProps={{ 'data-testid': '1' }}\n        />\n      </div>\n      <ImageMasonry\n        imageUrls={[\n          'https://media.giphy.com/media/XUojAIMYIIOQ9tpx2s/giphy.gif',\n          'https://media.giphy.com/media/mz7iww9tCUnJJeZvGN/giphy.gif',\n          'https://media.giphy.com/media/sTgTWEcVGK7CW3BQa7/giphy.gif',\n          'https://media.giphy.com/media/DxbAro4C39Qi5kJmPb/giphy.gif',\n          'https://media.giphy.com/media/qjSxTWJxqH4YDuIrOs/giphy.gif',\n          'https://media.giphy.com/media/KI9oNS4JBemyI/giphy.gif',\n          'https://media.giphy.com/media/7FBY7h5Psqd20/giphy.gif',\n          'https://media.giphy.com/media/Ogak8XuKHLs6PYcqlp/giphy.gif',\n          'https://media.giphy.com/media/FknIfejNbViSs/giphy.gif'\n        ]}\n        numCols={3}\n        containerWidth={'100%'}\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}