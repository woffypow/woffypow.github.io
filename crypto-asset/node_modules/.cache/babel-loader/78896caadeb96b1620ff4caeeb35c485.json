{"ast":null,"code":"var _jsxFileName = \"E:\\\\woffypow.github.io\\\\crypto-asset\\\\src\\\\components\\\\Item\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport './styles.scss';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n  // These options are needed to round to whole numbers if that's what you want.\n  minimumFractionDigits: 0,\n  // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  maximumFractionDigits: 0 // (causes 2500.99 to be printed as $2,501)\n\n});\n\nfunction Item(props) {\n  _s();\n\n  const {\n    coin,\n    price,\n    total,\n    name,\n    isBold,\n    TP,\n    TPwtBTC\n  } = props;\n  const [currentTotal, setCurrentTotal] = useState(total);\n  const [className, setClassName] = useState('');\n  useEffect(() => {\n    if (total < currentTotal) {\n      setClassName('loss');\n    } else if (total === currentTotal) {\n      setClassName('');\n    } else {\n      setClassName('gain');\n    }\n\n    setTimeout(() => {\n      setClassName('');\n    }, 1000);\n    setCurrentTotal(total);\n  }, [total]);\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    className: className,\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: [coin, \" \", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: price > 0 ? formatter.format(price) : price\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      className: isBold ? 'bold' : '',\n      children: formatter.format(total)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      style: {\n        color: '#155724'\n      },\n      children: [price > 0 && name === 'BTC' && `${(coin * TP / 100).toFixed(8)} BTC`, price > 0 && name !== 'BTC' && `${(coin * TP / 100).toFixed(4)} ${name} | ${(coin * TPwtBTC / 100).toFixed(4)} ${name}`]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Item, \"Tz1TyquzGjKBgy5g4WPBkZqa4S0=\");\n\n_c = Item;\nexport default Item;\n\nvar _c;\n\n$RefreshReg$(_c, \"Item\");","map":{"version":3,"sources":["E:/woffypow.github.io/crypto-asset/src/components/Item/index.js"],"names":["React","useState","useEffect","formatter","Intl","NumberFormat","style","currency","minimumFractionDigits","maximumFractionDigits","Item","props","coin","price","total","name","isBold","TP","TPwtBTC","currentTotal","setCurrentTotal","className","setClassName","setTimeout","format","color","toFixed"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,eAAP;;AAEA,MAAMC,SAAS,GAAG,IAAIC,IAAI,CAACC,YAAT,CAAsB,IAAtB,EAA4B;AAC5CC,EAAAA,KAAK,EAAE,UADqC;AAE5CC,EAAAA,QAAQ,EAAE,KAFkC;AAI5C;AACAC,EAAAA,qBAAqB,EAAE,CALqB;AAKlB;AAC1BC,EAAAA,qBAAqB,EAAE,CANqB,CAMnB;;AANmB,CAA5B,CAAlB;;AASA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AACnB,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA,IAAtB;AAA4BC,IAAAA,MAA5B;AAAoCC,IAAAA,EAApC;AAAwCC,IAAAA;AAAxC,MAAoDP,KAA1D;AAEA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCnB,QAAQ,CAACa,KAAD,CAAhD;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BrB,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,KAAK,GAAGK,YAAZ,EAA0B;AACxBG,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD,KAFD,MAEO,IAAIR,KAAK,KAAKK,YAAd,EAA4B;AACjCG,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAFM,MAEA;AACLA,MAAAA,YAAY,CAAC,MAAD,CAAZ;AACD;;AAEDC,IAAAA,UAAU,CAAC,MAAM;AACfD,MAAAA,YAAY,CAAC,EAAD,CAAZ;AACD,KAFS,EAEP,IAFO,CAAV;AAIAF,IAAAA,eAAe,CAACN,KAAD,CAAf;AACD,GAdQ,EAcN,CAACA,KAAD,CAdM,CAAT;AAgBA,sBACE;AAAI,IAAA,SAAS,EAAEO,SAAf;AAAA,4BACE;AAAA,iBACGT,IADH,OACUG,IADV;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAA,gBAAKF,KAAK,GAAG,CAAR,GAAYV,SAAS,CAACqB,MAAV,CAAiBX,KAAjB,CAAZ,GAAsCA;AAA3C;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAI,MAAA,SAAS,EAAEG,MAAM,GAAG,MAAH,GAAY,EAAjC;AAAA,gBAAsCb,SAAS,CAACqB,MAAV,CAAiBV,KAAjB;AAAtC;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAI,MAAA,KAAK,EAAE;AAAEW,QAAAA,KAAK,EAAE;AAAT,OAAX;AAAA,iBACIZ,KAAK,GAAG,CAAR,IAAaE,IAAI,KAAK,KAAtB,IAAgC,GAAE,CAACH,IAAI,GAAGK,EAAP,GAAY,GAAb,EAAkBS,OAAlB,CAA0B,CAA1B,CAA6B,MADnE,EAEIb,KAAK,GAAG,CAAR,IAAaE,IAAI,KAAK,KAAtB,IAAiC,GAAE,CAACH,IAAI,GAAGK,EAAP,GAAY,GAAb,EAAkBS,OAAlB,CAA0B,CAA1B,CAA6B,IAAGX,IAAK,MAAK,CAACH,IAAI,GAAGM,OAAP,GAAiB,GAAlB,EAAuBQ,OAAvB,CAA+B,CAA/B,CAAkC,IAAGX,IAAK,EAF3H;AAAA;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD;;GAnCQL,I;;KAAAA,I;AAqCT,eAAeA,IAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './styles.scss';\n\nconst formatter = new Intl.NumberFormat('id', {\n  style: 'currency',\n  currency: 'IDR',\n\n  // These options are needed to round to whole numbers if that's what you want.\n  minimumFractionDigits: 0, // (this suffices for whole numbers, but will print 2500.10 as $2,500.1)\n  maximumFractionDigits: 0 // (causes 2500.99 to be printed as $2,501)\n});\n\nfunction Item(props) {\n  const { coin, price, total, name, isBold, TP, TPwtBTC } = props;\n\n  const [currentTotal, setCurrentTotal] = useState(total);\n  const [className, setClassName] = useState('');\n\n  useEffect(() => {\n    if (total < currentTotal) {\n      setClassName('loss');\n    } else if (total === currentTotal) {\n      setClassName('');\n    } else {\n      setClassName('gain');\n    }\n\n    setTimeout(() => {\n      setClassName('');\n    }, 1000);\n\n    setCurrentTotal(total);\n  }, [total]);\n\n  return (\n    <tr className={className}>\n      <td>\n        {coin} {name}\n      </td>\n      <td>{price > 0 ? formatter.format(price) : price}</td>\n      <td className={isBold ? 'bold' : ''}>{formatter.format(total)}</td>\n      <td style={{ color: '#155724' }}>\n        { price > 0 && name === 'BTC' && `${(coin * TP / 100).toFixed(8)} BTC` }\n        { price > 0 && name !== 'BTC' &&  `${(coin * TP / 100).toFixed(4)} ${name} | ${(coin * TPwtBTC / 100).toFixed(4)} ${name}` }\n      </td>\n    </tr>\n  );\n}\n\nexport default Item;\n"]},"metadata":{},"sourceType":"module"}